[top]
# Path to video file to operate on. This is always required.
video_path = /path/to/video.mkv

# Path to region map image file. It must be a grayscale image with black background.
# Foreground regions are ordered from darkest to brightest.
region_map_path = /path/to/region_map/image.png

# Path to background image. The region of interest must be empty (without people).
# This is the image used for initializing the background model.
background_path = /path/to/background/image.png

# Path to file that maps the number of foreground pixels to the number of people.
# This file must have previously been generated and manually updated.
# Use generate-frames to generate a template file and corresponding frames.
pix_people_path = /path/to/pixel_to_people_/data.csv

# Path to file used for testing the algorithm. This file must contain ground truth
# data, i.e. the number of people that entered from each side from the start of the
# video to the specified frame. The format is not definitive yet and it will be
# further documented in the future.
tot_count_gtruth_path = /path/to/ground_truth/data

# Path to results file. Results will be written here in csv format.
results_path = /path/to/results.csv

# Path to reset data. It can be used to periodically reset the system.
reset_path = /path/to/reset_data.csv

# The old directed count is reset after this period, expressed as number of frames.
# This parameter is used to skip entries in the reset file specified with reset_path.
# By default the count is reset for each entry.
reset_period = 900

# Sub-frame region to work on. It is a rectangle defined by its top-left and
# bottom-right corners. Image coordinates are ordered from left to right (x-axis)
# and from top to bottom (y-axis). [[min_x, min_y], [max_x, max_y]]
box = [[240, 150], [580, 345]]

# Initial directed counts for each region. A directed count is the number of people
# walking in a certain direction. There must be n couples where n is the number of
# foreground regions. The first value of each couple denotes the number of people
# walking in direction 0, that is from the first region towards the last, while
# the second value denotes the number of people walking in direction 1, that is
# from the last region towards the first.
# (in the bridge case, direction 0 is left to right, direction 1 is right to left)
init_directed_count = [[3, 5], [5.5, 2], [4.5, 3]]

# Percentage of people that is assumed to have moved from one region to the next one
# in the specified time interval. The first value is for direction 0, the second for
# direction 1.
p = [0.666667, 0.37]

# Time interval as number of frames. The algorithm will skip this many frames at each
# step. A reasonable value should allow people to move from one region to the next,
# but not to the one after the next.
frame_interval = 90

# Try to match histograms of background and current frame before background subtraction.
# This is used to work around lighting variations. It is not perfect. Disabled by default.
histogram_matching = True

# Set blur_function to one of average, gaussian, median or bilinear filter to apply
# one of these filters to background and current frame before background subtraction.
# Kernel size and sigma are the parameters for the filters.
# Refer to OpenCV docs for more info on what they mean.
# Blurring is disabled by default.
blur_function = gaussian
blur_kernel_size = (3, 7)
blur_sigma = (2, 10)

# Number of frames that the average people count will be computed over.
# Rather that estimating the people count only at one instant, more consecutive
# frames are analyzed and the results are averaged, thus increasing the counting accuracy.
averaging_interval = 5

# Start working from the specified frame number.
start_at = 0

# Stop and quit at the specified frame number. When analysing, the actual stopping point
# might be up to stop_at + frame_interval + (averaging_interval/2)
stop_at = 18000

# Highlight people contours when playing the video (only for play command).
show_contours = False

# Wait for this number of milliseconds before showing next frame (only for playing).
# This does not include the additional required processing time.
play_delay = 1

# Wait for this number of milliseconds before showing next frame (only for rewinding).
# This does not include the additional required processing time.
rewind_delay = 30

# This is the number of frames that are replayed when pressing 'r'.
# A longer history requires more memory and is more computationally expensive.
rewind_history = 30

# Pause video at every frame that is a multiple of n (for playing).
# Useful for creating a reset file.
pause_frame_period = 4500